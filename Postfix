#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>  // Required for clrscr() and getch()

#define MAX_SIZE 100

// Structure to represent a stack
typedef struct {
    int top;
    int array[MAX_SIZE];
} Stack;

// Function to create a stack
Stack* createStack() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = -1;
    return stack;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(Stack* stack, int item) {
    if (isFull(stack)) {
        printf("Stack overflow! Cannot push %d\n", item);
        return;
    }
    stack->array[++stack->top] = item;
}

// Function to pop an element from the stack
int pop(Stack* stack) {
    if (!isEmpty(stack))
        return stack->array[stack->top--];
    
    printf("Stack underflow! Invalid expression.\n");
    exit(EXIT_FAILURE);  // Terminate the program if pop is called on an empty stack
}

// Function to evaluate postfix expression
int evaluatePostfix(char* expression) {
    Stack* stack = createStack();
    int i, operand1, operand2;

    for (i = 0; expression[i]; ++i) {
        char ch = expression[i];

        if (isdigit(ch)) {
            push(stack, ch - '0');  // Convert char to int
        } else if (ch == ' ') {
            continue;  // Ignore spaces in the expression
        } else {  // Operator
            operand2 = pop(stack);
            operand1 = pop(stack);

            switch (ch) {
                case '+': push(stack, operand1 + operand2); break;
                case '-': push(stack, operand1 - operand2); break;
                case '*': push(stack, operand1 * operand2); break;
                case '/': 
                    if (operand2 == 0) {
                        printf("Division by zero error!\n");
                        exit(EXIT_FAILURE);
                    }
                    push(stack, operand1 / operand2); 
                    break;
                default:
                    printf("Invalid character: %c\n", ch);
                    exit(EXIT_FAILURE);
            }
        }
    }
    
    int result = pop(stack);
    free(stack);  // Free the allocated stack memory
    return result;
}

// Main function
int main() {
    char expression[MAX_SIZE];

    clrscr();  // Clear screen (for Turbo C++)
    
    printf("Enter a valid postfix expression: ");
    fgets(expression, MAX_SIZE, stdin);

    // Remove newline character from input
    expression[strcspn(expression, "\n")] = '\0';

    int result = evaluatePostfix(expression);
    printf("Result: %d\n", result);

    getch();  // Wait for a key press before exiting (for Turbo C++)
    
    return 0;
}
